{"version":3,"sources":["config/index.js","components/SearchBar.js","components/UserTable.js","components/UserDetail.js","App.js","Wrapper.js","serviceWorker.js","index.js"],"names":["serverUrl","SearchBar","useContext","Context","debouncedSearch","searchHandler","searchQuery","useEffect","className","onChange","e","type","name","placeholder","UserTable","userList","sortUsers","getDetail","errorMessage","onClick","length","map","el","key","_id","index","replace","UserDetail","userDetail","setDisplayDetail","src","picture","alt","gender","age","email","phone","address","registered","friends","join","App","displayDetail","createContext","Wrapper","useState","setUserList","setUserDetail","setSearchQuery","setErrorMessage","searchRequest","query","axios","get","then","users","data","catch","err","debounce","Provider","value","target","id","user","term","sortedList","sort","a","b","localeCompare","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.031b4a32.chunk.js","sourcesContent":["//This file has been uploaded to git only for the purposes of this challenge.\n//In a production application, environment variables would be used.\n\nexport const serverUrl='http://localhost:3001'","import React, {useEffect, useContext} from 'react'\nimport {Context} from '../Wrapper'\n\nfunction SearchBar () {\n    const {debouncedSearch,searchHandler, searchQuery} = useContext(Context)\n    useEffect(()=>{debouncedSearch(searchQuery)},[searchQuery])\n    \n    return (\n        <div className=\"searchBar\">\n              <input className=\"input\" onChange={(e)=>searchHandler(e)}type=\"text\" name=\"search\" placeholder=\"Search\" />\n        </div>\n    )\n}\n\nexport default SearchBar","import React, {useContext} from 'react'\nimport {Context} from '../Wrapper'\n\nfunction UserTable(){\n    const {userList,sortUsers,getDetail,errorMessage} = useContext(Context)\n    \n    return (\n            <table className='userList'>\n                <thead>\n                    <tr className='headerRow'>\n                        <th className='idCell'>\n                            <small className='hoverText'>Sort by</small><button className='tableButton' onClick={()=>sortUsers('Id')}>Id</button>\n                        </th>\n                        <th className='nameCell'>\n                            <small className='hoverText'>Sort by</small><button className='tableButton' onClick={()=>sortUsers('First Name')}>First Name</button>\n                        </th>\n                        <th className='nameCell'>\n                            <small className='hoverText'>Sort by</small><button className='tableButton' onClick={()=>sortUsers('Last Name')}>Last Name</button>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {errorMessage ? \n                    <tr className='userRow'>\n                    <td className='idCell'>\n                            \n                        </td>\n                        <td className='nameCell'>\n                            {errorMessage}\n                        </td>\n                        <td className='nameCell'>\n                            \n                        </td> \n                </tr>\n                    :    \n                    userList.length ? userList.map(el=>{\n                    return (\n                    <tr key={el._id} onClick={()=>getDetail(el._id)} className='userRow'>\n                            <td className='idCell'>\n                                {el.index}\n                            </td>\n                            <td className='nameCell'>\n                                {el.name.replace(/\\w+$/g,\"\")}\n                            </td>\n                            <td className='nameCell'>\n                                {el.name.replace(/^\\w+/g,\"\")}\n                            </td> \n                    </tr>)\n                \n                }) : <tr className='userRow'>\n                        <td className='idCell'>\n                                No users found\n                            </td>\n                            <td className='nameCell'>\n                                -\n                            </td>\n                            <td className='nameCell'>\n                                -\n                            </td> \n                    </tr>}\n                </tbody>\n            </table>\n        )\n}\n\nexport default UserTable","import React, {useContext} from 'react'\nimport {Context} from '../Wrapper'\n\nfunction UserDetail(){\n    const {userDetail,setDisplayDetail, errorMessage} = useContext(Context)\n    \n    return (!errorMessage ?\n            <table className='userCard'>\n                <thead>\n                    <tr>\n                        <th className='username'>\n                            {userDetail.name}\n                        </th>\n                        <th className='userpicture'>\n                            <img src={userDetail.picture}alt={userDetail.name}/>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr >\n                        <td>\n                            <strong>Gender: </strong>{userDetail.gender}\n                        </td>\n                        <td>\n                            <strong>Age: </strong>{userDetail.age}\n                        </td>\n                    </tr>\n                    <tr >\n                        <td>\n                            <strong>Email: </strong>{userDetail.email}\n                        </td>\n                        <td>\n                            <strong>Phone: </strong>{userDetail.phone}\n                        </td>\n                    </tr>\n\n                    <tr >\n                        <td>\n                            <strong>Address: </strong>{userDetail.address}\n                        </td>\n                        <td>\n                            <strong>Registered: </strong>{userDetail.registered}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className='userfriends'>\n                            <strong>Friends: </strong>{userDetail.friends.map(el=>el.name).join(\", \")}\n                        </td>\n                        <td>\n                            <button onClick={()=>setDisplayDetail(false)}>Return to table</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            :\n            <table>\n                <thead>\n                    <tr>\n                        <th>\n                          {errorMessage}\n                        </th>\n                    </tr>\n                </thead>\n            </table>\n    )\n}\n\n\nexport default UserDetail","import React, {useContext} from 'react';\nimport {Context} from './Wrapper'\nimport './App.css';\nimport SearchBar from './components/SearchBar'\nimport UserTable from './components/UserTable'\nimport UserDetail from './components/UserDetail'\n\nfunction App() {\n  const {displayDetail} = useContext(Context)\n\n  return (\n    <div className=\"App\">\n        <h1>User Management</h1>\n        <SearchBar/>\n      {displayDetail ? \n        <UserDetail/> : \n        <UserTable />\n      }\n    </div>\n  );\n}\n\nexport default App;","import React, {useState, createContext} from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash.debounce'\nimport {serverUrl} from './config'\nimport App from './App'\n\nexport const Context = createContext({})\n\nfunction Wrapper() {\n  const [userList, setUserList] = useState([])\n  const [userDetail,setUserDetail] = useState({})\n  const [searchQuery, setSearchQuery] = useState('')\n  const [displayDetail,setDisplayDetail] = useState(false)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const searchRequest = query => {\n    setErrorMessage('')\n    if (!query || query.length < 2) {\n      setUserList([])\n      return\n    }\n    axios.get(`${serverUrl}/api/users?name=${query}`)\n      .then(users => {\n        setUserList(users.data)\n      })\n      .catch(err => setErrorMessage('The server was unable to process your request; please try again later'))\n  }\n\n  const debouncedSearch = debounce(searchRequest,200) \n\n  const searchHandler = e => setSearchQuery(e.target.value)\n\n  const sortUsers = term => {\n    const sortedList = [...userList].sort((a,b)=>{\n    switch (term){\n      case 'First Name':\n        return a.name.replace(/\\w+$/g,\"\").localeCompare(b.name.replace(/\\w+$/g,\"\"))\n      case 'Last Name':\n        return a.name.replace(/^\\w+/g,\"\").localeCompare(b.name.replace(/^\\w+/g,\"\"))\n      case 'Id':\n        return a.index - b.index\n      default:\n        return 0\n      }\n    })\n    setUserList(sortedList)\n  }\n\n  const getDetail = id => {\n    axios.get(`${serverUrl}/api/users/${id}/information`)\n    .then(user=>{\n        setErrorMessage('')\n        setUserDetail(user.data)\n        setDisplayDetail(true)\n    })\n    .catch(err=>setErrorMessage('The server was unable to process request; please try again later'))\n  }\n\n  return (\n    <Context.Provider value={\n      {debouncedSearch,\n        searchHandler,\n        getDetail,\n        userList, \n        sortUsers,\n        setUserList,\n        userDetail,\n        setUserDetail,\n        searchQuery, \n        setSearchQuery,\n        displayDetail,\n        setDisplayDetail,\n        errorMessage, \n        setErrorMessage,\n        searchRequest\n    }}>\n        <App/>\n    </Context.Provider>\n  )\n\n}\n\nexport default Wrapper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Wrapper from './Wrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Wrapper />, document.getElementById('root'));\n\n\nserviceWorker.unregister();"],"sourceRoot":""}