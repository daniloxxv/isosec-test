{"version":3,"sources":["components/SearchBar.js","config/index.js","components/UserTable.js","components/UserDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","setSearchQuery","className","onChange","e","target","value","searchHandler","type","name","placeholder","serverUrl","UserTable","userList","setUserDetail","setUserList","setDisplayDetail","setErrorMessage","errorMessage","sortUsers","term","sortedList","sort","a","b","replace","localeCompare","index","onClick","length","map","el","key","_id","id","axios","get","then","user","data","catch","err","UserDetail","src","picture","alt","gender","age","email","phone","address","registered","friends","join","App","useState","userDetail","searchQuery","displayDetail","searchRequest","query","users","useEffect","debounce","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91e6e8b4.chunk.js","sourcesContent":["import React from 'react'\nfunction SearchBar (props) {\n    const {setSearchQuery} = props\n    const searchHandler = e => setSearchQuery(e.target.value)\n\n\n\n    return (\n        <div className=\"searchBar\">\n              <input className=\"input\" onChange={(e)=>searchHandler(e)}type=\"text\" name=\"search\" placeholder=\"Search\" />\n        </div>\n    )\n}\n\nexport default SearchBar","//This file has been uploaded to git only for the purposes of this challenge.\n//In a production application, environment variables would be used.\n\nexport const serverUrl='http://localhost:3001'","import React from 'react'\nimport axios from 'axios';\nimport {serverUrl} from '../config'\n\nfunction UserTable({userList,setUserDetail,setUserList,setDisplayDetail,setErrorMessage,errorMessage}){\n\n    const sortUsers = term => {\n        const sortedList = [...userList].sort((a,b)=>{\n        switch (term){\n          case 'First Name':\n            return a.name.replace(/\\w+$/g,\"\").localeCompare(b.name.replace(/\\w+$/g,\"\"))\n          case 'Last Name':\n            return a.name.replace(/^\\w+/g,\"\").localeCompare(b.name.replace(/^\\w+/g,\"\"))\n          case 'Id':\n            return a.index - b.index\n          default:\n            return 0\n        }\n      })\n      setUserList(sortedList)\n    }\n    \n    const getDetail = id => {\n        axios.get(`${serverUrl}/api/users/${id}/information`)\n        .then(user=>{\n            setErrorMessage('')\n            setUserDetail(user.data)\n            setDisplayDetail(true)\n        })\n        .catch(err=>setErrorMessage('The server was unable to process request; please try again later'))\n    }\n\n\n    return (\n            <table className='userList'>\n                <thead>\n                    <tr className='headerRow'>\n                        <th className='idCell'>\n                            <button className='tableButton' onClick={()=>sortUsers('Id')}>Id</button>\n                        </th>\n                        <th className='nameCell'>\n                            <button className='tableButton' onClick={()=>sortUsers('First Name')}>First Name</button>\n                        </th>\n                        <th className='nameCell'>\n                            <button className='tableButton' onClick={()=>sortUsers('Last Name')}>Last Name</button>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {errorMessage ? \n                    <tr className='userRow'>\n                    <td className='idCell'>\n                            \n                        </td>\n                        <td className='nameCell'>\n                            {errorMessage}\n                        </td>\n                        <td className='nameCell'>\n                            \n                        </td> \n                </tr>\n                    :    \n                    userList.length ? userList.map(el=>{\n                    return (\n                    <tr key={el._id} onClick={()=>getDetail(el._id)} className='userRow'>\n                            <td className='idCell'>\n                                {el.index}\n                            </td>\n                            <td className='nameCell'>\n                                {el.name.replace(/\\w+$/g,\"\")}\n                            </td>\n                            <td className='nameCell'>\n                                {el.name.replace(/^\\w+/g,\"\")}\n                            </td> \n                    </tr>)\n                \n                }) : <tr className='userRow'>\n                        <td className='idCell'>\n                                No users found\n                            </td>\n                            <td className='nameCell'>\n                                -\n                            </td>\n                            <td className='nameCell'>\n                                -\n                            </td> \n                    </tr>}\n                </tbody>\n            </table>\n        )\n}\n\nexport default UserTable","import React from 'react'\n\nfunction UserDetail(props){\n    const {user,setDisplayDetail, errorMessage} = props\n    return (!errorMessage ?\n            <table className='userCard'>\n                <thead>\n                    <tr>\n                        <th className='username'>\n                            {user.name}\n                        </th>\n                        <th className='userpicture'>\n                            <img src={user.picture}alt={user.name}/>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr >\n                        <td>\n                            <strong>Gender: </strong>{user.gender}\n                        </td>\n                        <td>\n                            <strong>Age: </strong>{user.age}\n                        </td>\n                    </tr>\n                    <tr >\n                        <td>\n                            <strong>Email: </strong>{user.email}\n                        </td>\n                        <td>\n                            <strong>Phone: </strong>{user.phone}\n                        </td>\n                    </tr>\n\n                    <tr >\n                        <td>\n                            <strong>Address: </strong>{user.address}\n                        </td>\n                        <td>\n                            <strong>Registered: </strong>{user.registered}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className='userfriends'>\n                            <strong>Friends: </strong>{user.friends.map(el=>el.name).join(\", \")}\n                        </td>\n                        <td>\n                            <button onClick={()=>setDisplayDetail(false)}>Return to table</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            :\n            <table>\n                <thead>\n                    <tr>\n                        <th>\n                          {errorMessage}\n                        </th>\n                    </tr>\n                </thead>\n            </table>\n    )\n}\n\n\nexport default UserDetail","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash.debounce'\nimport './App.css';\nimport SearchBar from './components/SearchBar'\nimport UserTable from './components/UserTable'\nimport UserDetail from './components/UserDetail'\nimport {serverUrl} from './config'\n\nfunction App() {\n  const [userList, setUserList] = useState([])\n  const [userDetail,setUserDetail] = useState({})\n  const [searchQuery, setSearchQuery] = useState('')\n  const [displayDetail,setDisplayDetail] = useState(false)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const searchRequest = query => {\n    setErrorMessage('')\n    if (!query || query.length < 2) {\n      setUserList([])\n      return\n    }\n    axios.get(`${serverUrl}/api/users?name=${query}`)\n      .then(users => {\n        setUserList(users.data)\n      })\n      .catch(err => setErrorMessage('The server was unable to process your request; please try again later'))\n  }\n\n  useEffect(()=>{debounce(searchRequest,200)(searchQuery)},[searchQuery])\n\n  return (\n    <div className=\"App\">\n        <h1>User Management</h1>\n        <SearchBar setSearchQuery={setSearchQuery}/>\n      {displayDetail ? \n        <UserDetail user={userDetail} setDisplayDetail={setDisplayDetail} errorMessage={errorMessage}/> : \n        <UserTable setUserDetail={setUserDetail} setDisplayDetail={setDisplayDetail} userList={userList} setUserList={setUserList} errorMessage={errorMessage} setErrorMessage={setErrorMessage}/>\n      }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();"],"sourceRoot":""}